import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import csv
from datetime import datetime
from parser import fetch_news
from dotenv import load_dotenv
import os
import time
import schedule
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = os.getenv("GROUP_ID")

if not TOKEN or not GROUP_ID:
    logging.error("BOT_TOKEN –∏–ª–∏ GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")
    exit(1)
else:
    logging.info("BOT_TOKEN –∏ GROUP_ID —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

bot = telebot.TeleBot(TOKEN)

csv_file = 'news.csv'
sent_news_file = 'sent_news.txt'

if os.path.exists(sent_news_file):
    try:
        with open(sent_news_file, 'r', encoding='utf-8') as f:
            sent_news = set(line.strip() for line in f if line.strip())
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sent_news)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {sent_news_file}: {e}")
        sent_news = set()
else:
    sent_news = set()
    logging.info("–§–∞–π–ª sent_news.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")

def publish_news():
    global sent_news

    logging.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π...")

    try:
        logging.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
        fetch_news()
        logging.info("üîç –ù–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return

    new_news = []
    try:
        with open(csv_file, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row['data_key'] not in sent_news:
                    new_news.append(row)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {csv_file}: {e}")
        return

    logging.info(f"–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(new_news)}")

    if not new_news:
        logging.info("‚úÖ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        return

    for news in new_news:
        title = news['title']
        translated_title = news['translated_title']
        post_url = news['post_url']

        message_text = (
            f"üì∞ <b>{title}</b>\n\n"
            f"{translated_title}\n\n"
            f"<a href='{post_url}'>–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª</a>"
        )

        markup = InlineKeyboardMarkup()
        webapp_button = InlineKeyboardButton(
            text="üîó –û—Ä–∏–≥–∏–Ω–∞–ª —Å—Ç–∞—Ç—å–∏",
            url=post_url
        )
        markup.add(webapp_button)

        try:
            logging.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {title}")
            bot.send_message(
                GROUP_ID,
                message_text,
                parse_mode='HTML',
                disable_web_page_preview=False,
                reply_markup=markup
            )
            logging.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {title}")
            sent_news.add(news['data_key'])

            with open(sent_news_file, 'a', encoding='utf-8') as f:
                f.write(f"{news['data_key']}\n")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ '{title}': {e}")

        time.sleep(3)

    logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: {len(sent_news)} –∑–∞–ø–∏—Å–µ–π.")

schedule.every(60).minutes.do(publish_news)

if __name__ == "__main__":
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
    try:
        bot.send_message(GROUP_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        logging.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    logging.info("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ publish_news()...")
    publish_news()

    while True:
        schedule.run_pending()
        time.sleep(1)
